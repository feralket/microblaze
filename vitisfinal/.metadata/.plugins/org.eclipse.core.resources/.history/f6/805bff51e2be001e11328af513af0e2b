/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 *
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */

#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xtmrctr.h"
#include "tmrctr_header.h"
#include "xil_io.h"
#include "dig_stopwatch.h"



int main ()
{
	XStatus DIG_STOPWATCH_Reg_SelfTest(void * baseaddr_p)
	{
		u32 baseaddr;
		int write_loop_index;
		int read_loop_index;
		int Index;

		baseaddr = (u32) baseaddr_p;

		xil_printf("******************************\n\r");
		xil_printf("* User Peripheral Self Test\n\r");
		xil_printf("******************************\n\n\r");

		/*
		 * Write to user logic slave module register(s) and read back
		 */
		xil_printf("User logic slave module test...\n\r");

		for (write_loop_index = 0 ; write_loop_index < 4; write_loop_index++)
		  DIG_STOPWATCH_mWriteReg (baseaddr, write_loop_index*4, (write_loop_index+1)*READ_WRITE_MUL_FACTOR);
		for (read_loop_index = 0 ; read_loop_index < 4; read_loop_index++)
		  if ( DIG_STOPWATCH_mReadReg (baseaddr, read_loop_index*4) != (read_loop_index+1)*READ_WRITE_MUL_FACTOR){
		    xil_printf ("Error reading register value at address %x\n", (int)baseaddr + read_loop_index*4);
		    return XST_FAILURE;
		  }

		xil_printf("   - slave register write/read passed\n\n\r");

		return XST_SUCCESS;
	}

}
